{"version":3,"sources":["webpack:///./src/pages/changelog/0.15.js"],"names":["Title","styled","h1","Subtitle","div","Topic","h2","TopicDescription","v015","props","location","to","style","color","language","highlightStyle"],"mappings":"8FAAA,mIAQMA,EAAQC,IAAOC,GAAV,oEAAGD,CAAH,sBAILE,EAAWF,IAAOG,IAAV,uEAAGH,CAAH,0BAIRI,EAAQJ,IAAOK,GAAV,oEAAGL,CAAH,yBAILM,EAAmBN,IAAOG,IAAV,+EAAGH,CAAH,kFAqFPO,UA7EF,SAAAC,GAAK,OAChB,kBAAC,IAAD,CAAQC,SAAUD,EAAMC,UACtB,kBAACV,EAAD,qBACA,kBAACG,EAAD,uBACA,sEACyC,IACvC,kBAAC,IAAD,CAAMQ,GAAG,oBAAT,mBAFF,6BAGM,kBAAC,IAAD,CAAMA,GAAG,QAAT,OAHN,SAIE,8BAEF,kBAACN,EAAD,KACE,0BAAMO,MAAO,CAAEC,MAAO,YAAtB,mBADF,iBAGA,kBAACN,EAAD,KACE,kBAAC,IAAD,CAAMI,GAAG,eAAT,SADF,UAC4C,kBAAC,IAAD,sBAD5C,gGAIE,6BAJF,0FAMgB,kBAAC,IAAD,iBANhB,gCAM+D,IAC7D,kBAAC,IAAD,CAAMA,GAAG,yBAAT,YAPF,sBASA,kBAACN,EAAD,yCACA,kBAACE,EAAD,oNAIE,6BAJF,0CAIgD,IAC9C,kBAAC,IAAD,CAAMI,GAAG,mBAAT,QALF,uFAOE,6BAPF,oJAUE,6BAVF,wIAaE,kBAAC,IAAD,CAAmBG,SAAS,aAAaF,MAAOG,KAAhD,wXAeA,kBAAC,IAAD,CAAmBD,SAAS,aAAaF,MAAOG,KAAhD,6QA5BF,+IAqC4E,IAC1E,kBAAC,IAAD,CAAMJ,GAAG,qBAAT,eAtCF,OAsCsD,IACpD,kBAAC,IAAD,CAAMA,GAAG,oBAAT,cAvCF,IAuCgD,6BAvChD,+IA2CA,kBAACN,EAAD,sBACA,kBAACE,EAAD,KACE,4BACE,2CACc,kBAAC,IAAD,oBADd","file":"component---src-pages-changelog-0-15-js-c7e84ff2c31cb46c7a5b.js","sourcesContent":["import React from 'react'\r\nimport styled from 'styled-components'\r\nimport Link from 'gatsby-link'\r\nimport Layout from '../../components/Layout'\r\nimport SyntaxHighlighter from 'react-syntax-highlighter'\r\nimport highlightStyle from 'react-syntax-highlighter/styles/hljs/googlecode'\r\nimport { HL } from '../../components/HL'\r\n\r\nconst Title = styled.h1`\r\n  margin-bottom: 0;\r\n`\r\n\r\nconst Subtitle = styled.div`\r\n  padding-bottom: 30px;\r\n`\r\n\r\nconst Topic = styled.h2`\r\n  font-weight: normal;\r\n`\r\n\r\nconst TopicDescription = styled.div`\r\n  padding-right: 15%;\r\n\r\n  @media only screen and (max-width: 768px) {\r\n    padding-right: 0;\r\n  }\r\n`\r\n\r\nconst v015 = props => (\r\n  <Layout location={props.location}>\r\n    <Title>Purify v0.15</Title>\r\n    <Subtitle>April 30, 2020</Subtitle>\r\n    <div>\r\n      Not sure what purify is? Check out the{' '}\r\n      <Link to=\"/getting-started\">Getting Started</Link> page. Also check out\r\n      the <Link to=\"/faq\">FAQ</Link> page!\r\n      <br />\r\n    </div>\r\n    <Topic>\r\n      <span style={{ color: '#d22626' }}>Breaking change</span> inside Codec\r\n    </Topic>\r\n    <TopicDescription>\r\n      <Link to=\"/util/Codec\">Codec</Link> had a <HL>undefinedType</HL> codec\r\n      which was insufficient as there was no way to create optional properties\r\n      on an object.\r\n      <br />\r\n      This was brought up in an issue and to resolve this I removed this codec\r\n      in favor of a <HL>optional</HL> combinator, please check out{' '}\r\n      <Link to=\"/utils/Codec#optional\">the docs</Link> on how to use it.\r\n    </TopicDescription>\r\n    <Topic>An updated Either/MaybeAsync API</Topic>\r\n    <TopicDescription>\r\n      When I first started designing the API for Either and MaybeAsync I wanted\r\n      to bring the ease of use of proper error handling within IO, just like it\r\n      is in languages with do-notation and for-comprehensions.\r\n      <br /> That's why the original API in version{' '}\r\n      <Link to=\"/changelog/0.12\">0.12</Link> only worked with async/await and I\r\n      thought and this will be enough for most people.\r\n      <br />\r\n      Turns out most people started creating wrappers to make it more chainable\r\n      and issues started piling in GitHub, no one liked the \"imperative\" API.\r\n      <br />\r\n      That's why I decided to spend some time brainstorming a new API, that\r\n      didn't force people to use async/await, and this is the result:\r\n      <SyntaxHighlighter language=\"javascript\" style={highlightStyle}>\r\n        {`// async/await\r\nconst deleteUser = (req) =>\r\n    EitherAsync(async ({ liftEither, fromPromise, throwE }) => {\r\n       const request  = await liftEither(validateRequest(req))\r\n\r\n       try {\r\n           const user = await fromPromise(getUser(request.userId))\r\n       } catch {\r\n           throwE(Error.UserDoesNotExist)\r\n       }\r\n\r\n       return deleteUserDb(user)\r\n    })`}\r\n      </SyntaxHighlighter>\r\n      <SyntaxHighlighter language=\"javascript\" style={highlightStyle}>\r\n        {`// new API\r\nconst deleteUser = (req) =>\r\n    liftEither(validateRequest(req))\r\n        .chain(request => fromPromise(() => getUser(request.userId)))\r\n        .mapLeft(_     => Error.UserDoesNotExist)\r\n        .chain(user    => liftPromise(() => deleteUserDb(user)))`}\r\n      </SyntaxHighlighter>\r\n      This is stripped down version of the code, just to demonstrate the\r\n      similarities, for the full version check out the updated documentation of{' '}\r\n      <Link to=\"/adts/EitherAsync\">EitherAsync</Link> and{' '}\r\n      <Link to=\"/adts/MaybeAsync\">MaybeAsync</Link>.<br />\r\n      Both APIs will exist simultaneously and you're free to use whichever you\r\n      like, much like how you can use both async/await and Promise.then.\r\n    </TopicDescription>\r\n    <Topic>Other changes</Topic>\r\n    <TopicDescription>\r\n      <ul>\r\n        <li>\r\n          Added a new <HL>Either#swap</HL> method\r\n        </li>\r\n      </ul>\r\n    </TopicDescription>\r\n  </Layout>\r\n)\r\n\r\nexport default v015\r\n"],"sourceRoot":""}