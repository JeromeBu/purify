{"version":3,"sources":["webpack:///./src/pages/changelog/0.12.js"],"names":["Title","styled","h1","Subtitle","div","Topic","h2","TopicDescription","v012","props","location","to","href"],"mappings":"4FAAA,yFAMMA,EAAQC,IAAOC,GAAV,gEAAGD,CAAH,sBAILE,EAAWF,IAAOG,IAAV,mEAAGH,CAAH,0BAIRI,EAAQJ,IAAOK,GAAV,gEAAGL,CAAH,yBAILM,EAAmBN,IAAOG,IAAV,2EAAGH,CAAH,kFAiIPO,UAzHF,SAAAC,GAAK,OAChB,kBAAC,IAAD,CAAQC,SAAUD,EAAMC,UACtB,kBAACV,EAAD,qBACA,kBAACG,EAAD,yBACA,sEACyC,IACvC,kBAAC,IAAD,CAAMQ,GAAG,oBAAT,mBAFF,sGAIM,kBAAC,IAAD,CAAMA,GAAG,QAAT,OAJN,SAIsC,6BACpC,6BALF,yHAUA,kBAACN,EAAD,mCACA,kBAACE,EAAD,4HAE8C,6BAF9C,gJAIoE,6BAJpE,0IAMmE,6BANnE,wDAOwD,IACtD,kBAAC,IAAD,CAAMI,GAAG,oBAAT,cARF,OAQoD,IAClD,kBAAC,IAAD,CAAMA,GAAG,qBAAT,eATF,gFAaA,kBAACN,EAAD,yBACA,kBAACE,EAAD,sLAGmC,6BAHnC,6LAM2C,IACzC,uBAAGK,KAAK,wDAAR,YAEK,IATP,IAUG,6BAVH,8EAcA,kBAACP,EAAD,oCACA,kBAACE,EAAD,oJAEqE,6BAFrE,gEAMA,kBAACF,EAAD,+BACyB,6BADzB,gCAGA,kBAACE,EAAD,2GAE6B,6BAF7B,qkBAWS,6BACP,6BAZF,uIAc8D,6BAd9D,6HAgBoD,6BAhBpD,+BAiB+B,IAC7B,kBAAC,IAAD,oDAlBF,gBAkBwE,IACtE,kBAAC,IAAD,gDAnBF,IAoBE,6BApBF,wLA0BA,kBAACF,EAAD,0BACA,kBAACE,EAAD,8NAGqE,6BACnE,4BACE,4BACE,kBAAC,IAAD,4BADF,+FAIA,4BACE,kBAAC,IAAD,sBADF,0GAIA,4BACE,kBAAC,IAAD,8BADF,uEAOJ,kBAACF,EAAD,sBACA,kBAACE,EAAD,KACE,4BACE,2KAKA,4JAIA,+CACkB,kBAAC,IAAD,mBADlB,uBAC0D,IACxD,kBAAC,IAAD,gBAFF","file":"component---src-pages-changelog-0-12-js-fab17e50b936fbabe1d6.js","sourcesContent":["import React from 'react'\r\nimport styled from 'styled-components'\r\nimport Link from 'gatsby-link'\r\nimport Layout from '../../components/Layout'\r\nimport { HL } from '../../components/HL'\r\n\r\nconst Title = styled.h1`\r\n  margin-bottom: 0;\r\n`\r\n\r\nconst Subtitle = styled.div`\r\n  padding-bottom: 30px;\r\n`\r\n\r\nconst Topic = styled.h2`\r\n  font-weight: normal;\r\n`\r\n\r\nconst TopicDescription = styled.div`\r\n  padding-right: 15%;\r\n\r\n  @media only screen and (max-width: 768px) {\r\n    padding-right: 0;\r\n  }\r\n`\r\n\r\nconst v012 = props => (\r\n  <Layout location={props.location}>\r\n    <Title>Purify v0.12</Title>\r\n    <Subtitle>January 30, 2019</Subtitle>\r\n    <div>\r\n      Not sure what purify is? Check out the{' '}\r\n      <Link to=\"/getting-started\">Getting Started</Link> page. Not sure if you\r\n      want to introduce purify as a dependency to your project? Check out the\r\n      new <Link to=\"/faq\">FAQ</Link> page!<br />\r\n      <br />\r\n      Before starting, I want to thank everyone that contributed to the project\r\n      with bug reports, fixes and suggestions ⭐️.\r\n    </div>\r\n\r\n    <Topic>MaybeAsync and EitherAsync</Topic>\r\n    <TopicDescription>\r\n      Dealing with asynchronous values was a huge pain point and I've spent a\r\n      lot of time prototyping different solutions.<br />\r\n      The general approach to error handling in imperative languages is to throw\r\n      exceptions, which didn't fit into the functional nature of purify.<br />\r\n      At the same time, TypeScript's type system made expressing functional\r\n      patterns cumbersome, which didn't leave me with a lot of options.<br />\r\n      Despite those challenges I believe the final APIs for{' '}\r\n      <Link to=\"/adts/MaybeAsync\">MaybeAsync</Link> and{' '}\r\n      <Link to=\"/adts/EitherAsync\">EitherAsync</Link> turned out fairly elegant\r\n      and easy to use, please let me know your opinion!\r\n    </TopicDescription>\r\n\r\n    <Topic>Complete rewrite</Topic>\r\n    <TopicDescription>\r\n      Put simply, the library had too many issues mainly because of the\r\n      \"single-class\" implementation of the ADTs, which have since been rewritten\r\n      into plain functions and objects.<br />\r\n      This removed a whole class of errors (pun not intended), like a strange\r\n      bug that prevented functions returning a Nothing to be annotated with the\r\n      proper Maybe type (so strange I've filed{' '}\r\n      <a href=\"https://github.com/Microsoft/TypeScript/issues/29354\">\r\n        an issue\r\n      </a>{' '}\r\n      )<br />\r\n      This change is completely under the hood, the public API remains the same.\r\n    </TopicDescription>\r\n\r\n    <Topic>Proper fantasy-land support</Topic>\r\n    <TopicDescription>\r\n      All data types provided by purify now include a proper implementation of\r\n      the `constructor` property which points to the type representative.<br />\r\n      As a bonus, there is also a Foldable instance for Tuple now!\r\n    </TopicDescription>\r\n\r\n    <Topic>\r\n      Typeclasses - scrapped.<br />Id and Validation - removed.\r\n    </Topic>\r\n    <TopicDescription>\r\n      Old versions of purify exported interfaces which were designed to serve\r\n      the purpose of typeclasses.<br />\r\n      There were numerous issues though - typeclasses like Monad could be easily\r\n      represented as object methods, but functions like Applicative's `pure` (or\r\n      `of` in fantasy-land) are meant to go on the type representative, not on\r\n      the object. A Monad instance requires an Applicative instance which was\r\n      unrepresentable in TypeScript's type system without resorting to\r\n      techniques that don't fit into the \"interfaces with generics\" model.\r\n      There's also the issues with typeclasses like Ord, Setoid and Semigroup\r\n      which don't make much sense in JavaScript where you can compare all\r\n      values.<br />\r\n      <br />\r\n      All of these things led to the removal of typeclasses from the library.\r\n      With that went the Id datatype which serves no need anymore.<br />\r\n      Since typeclasses were also the justification for having folders in the\r\n      library exports, now the folder structure is flat.<br />\r\n      This means that imports like{' '}\r\n      <HL>{`import { Maybe } from 'purify-ts/adts/Maybe`}</HL> are now just{' '}\r\n      <HL>{`import { Maybe } from 'purify-ts/Maybe'`}</HL>.\r\n      <br />\r\n      The Validation module was removed for a completely different reason though\r\n      - the API was just too limiting and ad-hoc, hopefully it will return soon\r\n      in a better, more generic form.\r\n    </TopicDescription>\r\n\r\n    <Topic>New Maybe methods</Topic>\r\n    <TopicDescription>\r\n      The original focus for this release was better JS interop and before the\r\n      implementation of MaybeAsync and EitherAsync took most of my time working\r\n      on this project, two new methods were added to the Maybe data type.<br />\r\n      <ul>\r\n        <li>\r\n          <HL>Maybe#chainNullable</HL> - The same as Maybe#chain but for\r\n          functions that return a nullable value instead of Maybe.\r\n        </li>\r\n        <li>\r\n          <HL>Maybe#extract</HL> - Now returns an undefined instead of null as\r\n          undefined is used more often to reprent missing values.\r\n        </li>\r\n        <li>\r\n          <HL>Maybe#extractNullable</HL> - The new name of Maybe#extract from\r\n          previous versions of purify\r\n        </li>\r\n      </ul>\r\n    </TopicDescription>\r\n\r\n    <Topic>Other changes</Topic>\r\n    <TopicDescription>\r\n      <ul>\r\n        <li>\r\n          There is now a \"Guides\" section for each data type which will\r\n          hopefully include a lot of useful information in the near future. Stay\r\n          tuned.\r\n        </li>\r\n        <li>\r\n          Docs are now part of the npm package, which means you should be\r\n          getting more information in your editor during autocomplete.\r\n        </li>\r\n        <li>\r\n          Fixed bug where <HL>Just(null)</HL> would be treated as{' '}\r\n          <HL>Nothing</HL>.\r\n        </li>\r\n      </ul>\r\n    </TopicDescription>\r\n  </Layout>\r\n)\r\n\r\nexport default v012\r\n"],"sourceRoot":""}